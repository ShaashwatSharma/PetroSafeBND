generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          String     @id @default(uuid())
  name        String
  createdAt   DateTime   @default(now())
  vehicles    Vehicle[]
  assignments DriverVehicleAssignment[]
}

model Vehicle {
  id           String     @id @default(uuid())
  registration String     @unique
  organizationId String
  sensors      Sensor[]
  assignments  DriverVehicleAssignment[]
  fuelLogs     FuelLog[]
  theftAlerts  TheftAlert[]
  
  organization Organization @relation(fields: [organizationId], references: [id])
}

model Sensor {
  id         String   @id @default(uuid())
  sensorId   String   @unique
  vehicleId  String
  location   String?

  vehicle    Vehicle  @relation(fields: [vehicleId], references: [id])
  fuelLogs   FuelLog[]
}

model DriverVehicleAssignment {
  id             String     @id @default(uuid())
  userId         String     // Keycloak user ID
  vehicleId      String
  organizationId String
  assignedAt     DateTime   @default(now())
  unassignedAt   DateTime?

  vehicle        Vehicle     @relation(fields: [vehicleId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model FuelLog {
  id         String     @id @default(uuid())
  sensorId   String
  vehicleId  String
  userId     String     // Keycloak user ID
  fuelLevel  Float
  latitude   Float
  longitude  Float
  recordedAt DateTime   @default(now())

  sensor     Sensor     @relation(fields: [sensorId], references: [id])
  vehicle    Vehicle    @relation(fields: [vehicleId], references: [id])
  theftAlert TheftAlert?
}

model TheftAlert {
  id             String       @id @default(uuid())
  fuelLogId      String       @unique
  userId         String       // Keycloak user ID
  vehicleId      String
  status         TheftStatus  @default(PENDING)
  description    String?
  createdAt      DateTime     @default(now())

  fuelLog        FuelLog       @relation(fields: [fuelLogId], references: [id])
  vehicle        Vehicle      @relation(fields: [vehicleId], references: [id])
  incidentReport IncidentReport?
}

model IncidentReport {
  id            String       @id @default(uuid())
  theftAlertId  String       @unique
  userId        String       // Keycloak user ID
  reportDetails String
  createdAt     DateTime     @default(now())

  theftAlert    TheftAlert   @relation(fields: [theftAlertId], references: [id])
}

enum TheftStatus {
  PENDING
  REVIEWED
  CONFIRMED
  DISMISSED
}
